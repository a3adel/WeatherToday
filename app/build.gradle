plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'dagger.hilt.android.plugin'
    id "de.mannodermaus.android-junit5"
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.example.weathertoday"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        buildConfigField("String", "API_KEY", "\"33cfb57ecc967d3b50b05a2a9f7146df\"")

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.google.android.gms:play-services-location:18.0.0'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'


    //espresso testing
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_core"
    androidTestImplementation "androidx.test:runner:$test_runner"
    androidTestImplementation "androidx.test:rules:$test_runner"

    // Hilt For instrumentation tests
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_testing"
    androidTestAnnotationProcessor "com.google.dagger:hilt-compiler:$hilt_testing"

    //Hilt For local unit tests
    testImplementation "com.google.dagger:hilt-android-testing:$hilt_testing"
    testAnnotationProcessor "com.google.dagger:hilt-compiler:$hilt_testing"

    //mockk for testing
    testImplementation "io.mockk:mockk:$mockk_version"

    //coroutine testing
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutine_test_version"

    testImplementation("org.junit.jupiter:junit-jupiter-api:$junit_5")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junit_5")


    // Kotlin
    implementation "androidx.activity:activity-ktx:$activity_version"
// ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"


    // Annotation processor
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"

    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:$arch_version"

    // Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    //moshi
    implementation("com.squareup.moshi:moshi:$moshi_version")
    kapt("com.squareup.moshi:moshi-kotlin-codegen:$moshi_version")

    //retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"
    implementation("com.squareup.okhttp3:logging-interceptor:$okhttp_version")

    // alerts
    implementation "com.github.f0ris.sweetalert:library:$sweet_version"
    implementation 'androidx.fragment:fragment:1.3.0'
    //glide
    implementation("com.github.bumptech.glide:glide:$glideVersion")

}